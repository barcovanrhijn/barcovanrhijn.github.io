<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-02-25T01:59:36+02:00</updated><id>/feed.xml</id><entry><title type="html">Delving into TypeScript - first impressions</title><link href="/typescript/2021/02/22/TypeScript-Diving-Deeper.html" rel="alternate" type="text/html" title="Delving into TypeScript - first impressions" /><published>2021-02-22T00:00:00+02:00</published><updated>2021-02-22T00:00:00+02:00</updated><id>/typescript/2021/02/22/TypeScript%20Diving%20Deeper</id><content type="html" xml:base="/typescript/2021/02/22/TypeScript-Diving-Deeper.html">&lt;p&gt;I discovered recently that Ionic have made VueJs quite a priority on their development line-up. And since I’ve got a new project lined up I decided to dig in and see what they’ve got.&lt;/p&gt;

&lt;p&gt;So with VueJS and Ionic came a recommendation to keep Typescript. And my journey began Mid Jan 2021 with types. It’s not been all love at first bite but after delving into a 60min carsh course I’ve been able to survive the first few days. The promised gains seem worth the pain.&lt;/p&gt;

&lt;p&gt;My first few days have come with intense pain though. After coding for a few days I kept running into Type errors that I did not quite know how to solve. Initially it seemed that TS is the roadblock to getting any code to work. I’d write out perfect JS and it would fall on it’s face every time. Test it outside of TS and it works flawlessly.&lt;/p&gt;

&lt;p&gt;And after spending a few days chasing Type errors I decided to dig deeper as there has to be something I missed initially.&lt;/p&gt;

&lt;p&gt;##A few lessons learned&lt;/p&gt;

&lt;p&gt;###Runtime errors with TS and Ionic sometimes show skewed line numbers. 
This seems to be a current bug relating to SFC in VueJS. My Termporary work around has been to code with hot reload and fix errors immediately before proceeding. It’s a better way of coding that leads to better productivity any way.&lt;/p&gt;

&lt;p&gt;###Git is your friend
When line numbers go fuzzy and minutes go by. It’s often easier to revert a small change and start it again. Since we’ve got git might as well put it to good use.&lt;/p&gt;

&lt;p&gt;###Types are easy
The fundimentals of Types are not hard. But you need to give you brain some time to absorb the implications in code.&lt;/p&gt;

&lt;p&gt;Most of TS is really just JS and you can actually partially impliment TS in a project.&lt;/p&gt;

&lt;p&gt;Essentially Types are a way of documenting expected data types and values for all variables, arrays and objects. There’s much debate around this but the simplest way is that you should only use Interfaces for Objects. For all the rest use type definitions.&lt;/p&gt;

&lt;p&gt;In a pinch you can define the type as Any. But this should be used with caution as it sort of negates the benefits of using TS in the first place.&lt;/p&gt;

&lt;p&gt;As a Senior Ionic Dev pointed out types are mostly inferred in Ionic and you’ll run into type issues if you’re trying to do something too radical.&lt;/p&gt;</content><author><name>Barco van Rhijn</name></author><category term="TypeScript" /><summary type="html">I discovered recently that Ionic have made VueJs quite a priority on their development line-up. And since I’ve got a new project lined up I decided to dig in and see what they’ve got.</summary></entry><entry><title type="html">Booting up my personal Blog</title><link href="/jekyll/2021/01/15/Blog-Rebooting.html" rel="alternate" type="text/html" title="Booting up my personal Blog" /><published>2021-01-15T00:00:00+02:00</published><updated>2021-01-15T00:00:00+02:00</updated><id>/jekyll/2021/01/15/Blog-Rebooting</id><content type="html" xml:base="/jekyll/2021/01/15/Blog-Rebooting.html">&lt;p&gt;I’ve been keeping notes of projects for some time. And have meant to publish this for the benefits of others to learn from some of the experiences I’ve had. And to share some of my though process.&lt;/p&gt;

&lt;p&gt;So Here goes….&lt;/p&gt;

&lt;h2 id=&quot;github-meet-jekyl&quot;&gt;Github, Meet Jekyl&lt;/h2&gt;
&lt;p&gt;To get a Github pages site up you need to start a repo with your username.githubpages.com. You’ll find the the &lt;a href=&quot;https://pages.github.com/&quot;&gt; getting started with github pages &lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;can-you-say-jekyll&quot;&gt;Can you say Jekyll?&lt;/h2&gt;
&lt;p&gt;This site is based of Jekyl which is a Jamstack site framework built with Ruby on Rails. It’s Github’s reccomended default although you can use things like Hugo or others. I like the simplicity of Jekyll which allows for maximum design expression with little fuss.&lt;/p&gt;

&lt;p&gt;Jekyl speaks HTML, Markdown, JSON and more. It’s a fantastic way to get technical content up if you don’t need a backend.&lt;/p&gt;

&lt;h2 id=&quot;where-do-i-put-images-in-jekyll&quot;&gt;Where do I put images in Jekyll&lt;/h2&gt;
&lt;p&gt;Under the main Assets folder. The _site folder is generated on build in Jekyll.&lt;/p&gt;

&lt;h2 id=&quot;adding-classes-in-jekyll-markdown&quot;&gt;Adding classes in Jekyll Markdown&lt;/h2&gt;

&lt;p&gt;Just add your classes like this
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{: .rounded .image}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;![alt text](logo.png &quot;Title&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will render out the image tag with the classes you specified.&lt;/p&gt;

&lt;h2 id=&quot;ready-set-lauch&quot;&gt;Ready Set Lauch&lt;/h2&gt;
&lt;p&gt;Write, Build, Git Push and we’re off to a beautiful friendship.&lt;/p&gt;</content><author><name>Barco van Rhijn</name></author><category term="Jekyll" /><summary type="html">I’ve been keeping notes of projects for some time. And have meant to publish this for the benefits of others to learn from some of the experiences I’ve had. And to share some of my though process.</summary></entry><entry><title type="html">Developer Analytics in Wakatime</title><link href="/workflow/2021/01/02/Tracking-code-Wakatime.html" rel="alternate" type="text/html" title="Developer Analytics in Wakatime" /><published>2021-01-02T00:00:00+02:00</published><updated>2021-01-02T00:00:00+02:00</updated><id>/workflow/2021/01/02/Tracking-code-Wakatime</id><content type="html" xml:base="/workflow/2021/01/02/Tracking-code-Wakatime.html">&lt;p&gt;I’ve been looking at ways to track overall time spent coding and dig deeper into where I spend time.&lt;/p&gt;

&lt;h2 id=&quot;task-tracking-is-not-always-enough&quot;&gt;Task tracking is not always enough&lt;/h2&gt;
&lt;p&gt;As a Freelancer I track time for projects short and long term but often feel that I want to get an overview. Especially when I’m working a few short term projects along side my longer term project work.&lt;/p&gt;

&lt;h2 id=&quot;meet-wakatime&quot;&gt;Meet WakaTime&lt;/h2&gt;
&lt;p&gt;I discovered WakaTime which is a great way of setting code goals to ensure that I spend more time coding. It helps me see when customer communication starts being too big a part of my work day. Since it intergrates directly into my IDE it’s a great fit.&lt;/p&gt;

&lt;h3 id=&quot;coding-goals&quot;&gt;Coding goals&lt;/h3&gt;
&lt;p&gt;Using WakaTime has allowed me to set Coding goals&lt;/p&gt;

&lt;h3 id=&quot;understand-what-you-code&quot;&gt;Understand what you code&lt;/h3&gt;
&lt;p&gt;And it gives an interesting graph that shows what languages dominated your coding day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/
wakatime-coding-stats.png&quot; alt=&quot;alt wakatime&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;heres-an-example-of-how-my-coding-time-was-split-today-youll-notice-other-here-which-was-spent-building-out-an-email-signature-for-a-client&quot;&gt;Here’s an example of how my coding time was split today. You’ll notice other here which was spent building out an email signature for a client.&lt;/h4&gt;

&lt;h3 id=&quot;much-more&quot;&gt;Much more&lt;/h3&gt;
&lt;p&gt;Waka time has much to offer and is a great way to monitor lots of coding metrics.&lt;/p&gt;

&lt;p&gt;Overall it’s good fun and highly reccomended.&lt;/p&gt;</content><author><name>Barco van Rhijn</name></author><category term="Workflow" /><summary type="html">I’ve been looking at ways to track overall time spent coding and dig deeper into where I spend time.</summary></entry><entry><title type="html">Developer Analytics in Wakatime</title><link href="/workflow/2021/01/01/Social-Sharing.html" rel="alternate" type="text/html" title="Developer Analytics in Wakatime" /><published>2021-01-01T00:00:00+02:00</published><updated>2021-01-01T00:00:00+02:00</updated><id>/workflow/2021/01/01/Social-Sharing</id><content type="html" xml:base="/workflow/2021/01/01/Social-Sharing.html"></content><author><name>Barco van Rhijn</name></author><category term="Workflow" /><summary type="html"></summary></entry><entry><title type="html">Hello Ruby</title><link href="/ruby/2020/12/18/hello-Ruby.html" rel="alternate" type="text/html" title="Hello Ruby" /><published>2020-12-18T00:00:00+02:00</published><updated>2020-12-18T00:00:00+02:00</updated><id>/ruby/2020/12/18/hello-Ruby</id><content type="html" xml:base="/ruby/2020/12/18/hello-Ruby.html">&lt;p&gt;I’ve been hearing about Ruby for some years. But I’ve been sceptical about the amount of moving parts (Magic) that are introduced by Ruby in the process of development. So this year I decided to test it out for myself in the holidays.&lt;/p&gt;

&lt;p&gt;In 2020  I’ve built out a small Project in Laravel that handles Reseller packages and Pricing for B2B it feels familiar coming from the Javascript side of things. I also disovered that Laravel sort of combines ideas from JS and Ruby.&lt;/p&gt;

&lt;p&gt;One of the Developers I follow online mentioned what they’ve been doing on Ruby and I was intrigued to take a look. Well I spent a today and learned the basics.&lt;/p&gt;

&lt;p&gt;So far I like that Ruby is similar in it’s abillity to scaffold various parts of an application. After learning how that works it no longer seems like a Ruby Project can spin out of control.&lt;/p&gt;

&lt;h1 id=&quot;what-i-like&quot;&gt;What I like&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;I like how easy CRUD is with Ruby - feels like Laravel.&lt;/li&gt;
  &lt;li&gt;The stack feels less fragmented than JS stacks do.&lt;/li&gt;
  &lt;li&gt;The language so far seems enjoyable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-i-may-have-to-learn-to-love&quot;&gt;What I may have to learn to love&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Deployement of Ruby projects seem to be a bit more complicated than PHP but not so much more complicated than Node.js apps. I manage several VPS’ running production code. So It’s not insurmountable to deploy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-i-learned&quot;&gt;What I learned&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Intalling a Ruby Development environment
Learned that this part of Ruby on Windows can be tricky and how to get it done.&lt;/li&gt;
  &lt;li&gt;Ruby MVC and Project structure
The Ruby project Structure is remarkably easy to understand coming from Laravel&lt;/li&gt;
  &lt;li&gt;Routing with Ruby
Routing uses&lt;/li&gt;
  &lt;li&gt;Variables in Ruby
Ruby variables are just words like in Bash unless you want to increase their scope. Variables passed from controller to page are written @variable&lt;/li&gt;
  &lt;li&gt;Finding and Using Gems&lt;/li&gt;
  &lt;li&gt;Defining production vs development gems&lt;/li&gt;
  &lt;li&gt;Controllers in Ruby
Controllers are&lt;/li&gt;
  &lt;li&gt;Migrations and Databases in Ruby&lt;/li&gt;
  &lt;li&gt;Production v.s. Development configs&lt;/li&gt;
  &lt;li&gt;Creating CRUD forms in Ruby&lt;/li&gt;
  &lt;li&gt;Add custom styling to Ruby elements&lt;/li&gt;
  &lt;li&gt;Use Devise to create login and profile pages&lt;/li&gt;
  &lt;li&gt;Database Associations&lt;/li&gt;
  &lt;li&gt;Controllers beyond basic Crud&lt;/li&gt;
  &lt;li&gt;Deploying Ruby code to git and Heroku&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Planning to build out a first project over Tomorrow.&lt;/p&gt;</content><author><name>Barco van Rhijn</name></author><category term="Ruby" /><summary type="html">I’ve been hearing about Ruby for some years. But I’ve been sceptical about the amount of moving parts (Magic) that are introduced by Ruby in the process of development. So this year I decided to test it out for myself in the holidays.</summary></entry><entry><title type="html">Vanilla PHP</title><link href="/php/2020/08/20/Vanilla-PHP.html" rel="alternate" type="text/html" title="Vanilla PHP" /><published>2020-08-20T00:00:00+02:00</published><updated>2020-08-20T00:00:00+02:00</updated><id>/php/2020/08/20/Vanilla-PHP</id><content type="html" xml:base="/php/2020/08/20/Vanilla-PHP.html">&lt;p&gt;A Senior PHP developer approached me about collaborating on a Vanilla PHP project. His requirement was for us to work according to his php standard.&lt;/p&gt;

&lt;p&gt;We started building template engine that could be easily filled out with details to generate brand sites.&lt;/p&gt;

&lt;p&gt;I asked to do the front-end generating code. I was inspired by how Atomic Design systems worked and decided to build out a template engine with some overlapping features with Twigg. Since the requirements was that there be no dependancies I could not use Twigg or Handlebars or other such systems. 
The project consisted of two parts. A UI that was customer facing and centrally manages all the site information and links. And the Template builder which connects to the API and parses the Json into arrays and then outputs this in a template. The API defines several settings that makes the Customer facing builder allow simple UI configurations.&lt;/p&gt;

&lt;p&gt;I discovered that some of what I wanted to do to make the templating more flexible is known as Meta programming. I discussed ways we could free the data model by moving to Json in Mysql or Mongodb. Because after the first few days it became apparent that each new change.&lt;/p&gt;

&lt;p&gt;In the process of doing the work I decided to learn how to build unit tests in PHP. I’ve just touched on the basics of doing this in Javascript after what I’d learned in FreeCodeCamp. But I’d not used this in PHP yet. In the past I’d mostly customized PHP code or written plugins which did not have enough code to make Unit tests a viable option. 
When I asked the developer I worked with it turned out that he had not used PHPUnit before so I was on my own with this.&lt;/p&gt;

&lt;p&gt;taking on a Vanilla PHP project for a client. In 3 Weeks I coded up my first php from scratch project in Vanilla PHP and produced a minimum viable product as part of an attempt to partner up with senior PHP developer. The 3 weeks was valuable experience but the partnership was not well matched. When comparing notes I was producing 6months of output in 3weeks compared to the other dev’s output. I had started with a blank canvas and PHP documentation and 5min worth of Sage advice.&lt;/p&gt;</content><author><name>Barco van Rhijn</name></author><category term="PHP" /><summary type="html">A Senior PHP developer approached me about collaborating on a Vanilla PHP project. His requirement was for us to work according to his php standard.</summary></entry><entry><title type="html">HTML - Part2</title><link href="/html/2019/01/16/HTML-Part-2.html" rel="alternate" type="text/html" title="HTML - Part2" /><published>2019-01-16T00:00:00+02:00</published><updated>2019-01-16T00:00:00+02:00</updated><id>/html/2019/01/16/HTML-Part-2</id><content type="html" xml:base="/html/2019/01/16/HTML-Part-2.html">&lt;p&gt;It’s day two of my HTML challenge. I’m feeling great. I’m completing this challenge during the evenings after work.&lt;/p&gt;

&lt;p&gt;Still reviewing things I know well.&lt;/p&gt;

&lt;p&gt;#Forms
-Check Radio Buttons and Checkboxes by Default
-Create a Set of Checkboxes
-Create a Set of Radio Buttons
-Use HTML5 to Require a Field
-Add a Submit Button to a Form
-Create a Form Element
-Add Placeholder Text to a Text Field
-Create a Text Field
-Create an Ordered List
-Create a Bulleted Unordered List&lt;/p&gt;

&lt;h1 id=&quot;turn-an-image-into-a-link&quot;&gt;Turn an Image into a Link&lt;/h1&gt;
&lt;p&gt;Images make great links. Used to do this with buttons on web pages in the days of CSS1. But now days I like CSS Buttons.&lt;/p&gt;
&lt;h1 id=&quot;make-dead-links-using-the-hash-symbol&quot;&gt;Make Dead Links Using the Hash Symbol&lt;/h1&gt;
&lt;p&gt;Fab trick I use often to mock up links and navs before I have all the details.&lt;/p&gt;
&lt;h1 id=&quot;nest-an-anchor-element-within-a-paragraph&quot;&gt;Nest an Anchor Element within a Paragraph&lt;/h1&gt;
&lt;p&gt;Let the Nesting begin. Something I use almost daily when I build out content for a page. It’s a staple of well built sites.&lt;/p&gt;</content><author><name>Barco van Rhijn</name></author><category term="HTML" /><summary type="html">It’s day two of my HTML challenge. I’m feeling great. I’m completing this challenge during the evenings after work.</summary></entry><entry><title type="html">HTML Part</title><link href="/html/2019/01/15/HTML-Part-1.html" rel="alternate" type="text/html" title="HTML Part" /><published>2019-01-15T00:00:00+02:00</published><updated>2019-01-15T00:00:00+02:00</updated><id>/html/2019/01/15/HTML-Part-1</id><content type="html" xml:base="/html/2019/01/15/HTML-Part-1.html">&lt;h2 id=&quot;refreshing-and-documenting-my-html-skills&quot;&gt;Refreshing and documenting my HTML skills&lt;/h2&gt;
&lt;p&gt;I decided to sign up for FreeCodeCamp to fill out any gaps in my Front End design skills. Been using several resources around the web while building customer and internal projects. But there has never been a way for me to Shocase what I know. Plus I think it may be high time I run through everything from top to bottom. I know much of this will be a review, but I’ve seen how learning, then sharing deepens knowledge. My first day has been a great review on some things I know well.&lt;/p&gt;

&lt;p&gt;##What I learned today:&lt;/p&gt;

&lt;h1 id=&quot;html-headings&quot;&gt;HTML Headings&lt;/h1&gt;
&lt;p&gt;Something familiar how to place different heading tags. Good structure is essential to any website. Sizing needs to create flow that’s easy to skim read. This is what most of us do on the web. From a design perspective there are several approaches to this. Using good Typography and Text sizing together helps retain interest. Plus it makes it a whole lot easier to find what you’re looking for. Using H1 and H2 tags carefully is important to the on page SEO of a site if you’re also laying out the content. It’s one reason why I like seperating design and content. Makes the whole process a lot easier.&lt;/p&gt;

&lt;h1 id=&quot;inform-with-the-paragraph-element&quot;&gt;Inform with the Paragraph Element&lt;/h1&gt;
&lt;p&gt;Paragraph tags are great to seperate text.&lt;/p&gt;

&lt;h1 id=&quot;fill-in-the-blank-with-placeholder-text&quot;&gt;Fill in the Blank with Placeholder Text&lt;/h1&gt;
&lt;p&gt;Pig latin works a treat for filling out paragraphs to give a sense of how a design will flow once it has actual content. The Kitty pig latin was very cute. Text is placed between the tags naturally.&lt;/p&gt;

&lt;h1 id=&quot;comment--uncomment-html&quot;&gt;Comment &amp;amp; Uncomment HTML&lt;/h1&gt;
&lt;p&gt;What would the world be without comments.&lt;/p&gt;

&lt;h1 id=&quot;delete-html-elements&quot;&gt;Delete HTML Elements&lt;/h1&gt;
&lt;p&gt;Select everything from a the opening tag to the closing tag. Hit Delete - Boom.&lt;/p&gt;

&lt;h1 id=&quot;introduction-to-html5-elements&quot;&gt;Introduction to HTML5 Elements&lt;/h1&gt;
&lt;p&gt;HTML5 Elements are so much easier to read and work with than a page of Div’s.&lt;/p&gt;

&lt;p&gt;The main HTML tag is a great way to make the main content of the page more visible to others and Search engines like it too.&lt;/p&gt;

&lt;p&gt;main, header, footer, nav, video, article, section&lt;/p&gt;

&lt;h1 id=&quot;add-images-to-your-website&quot;&gt;Add Images to Your Website&lt;/h1&gt;
&lt;p&gt;A review of placing an image tag and writing a descriptive alt tag. Decorative images don’t need alt tags. They just make noise on screen readers. Wonder what SEO audits will make of this. Used src= for the image&lt;/p&gt;

&lt;h1 id=&quot;link-to-external-pages-with-anchor-elements&quot;&gt;Link to External Pages with Anchor Elements&lt;/h1&gt;
&lt;p&gt;target=”_blank” opens up a new tab in the user’s browser. Uses href= for the link.&lt;/p&gt;

&lt;h1 id=&quot;link-to-internal-sections-of-a-page-with-anchor-elements&quot;&gt;Link to Internal Sections of a Page with Anchor Elements&lt;/h1&gt;
&lt;p&gt;Create links with the id of an element i.e. #navbar to jump to &amp;lt;nav id=”navbar&amp;gt;&lt;/p&gt;</content><author><name>Barco van Rhijn</name></author><category term="HTML" /><summary type="html">Refreshing and documenting my HTML skills I decided to sign up for FreeCodeCamp to fill out any gaps in my Front End design skills. Been using several resources around the web while building customer and internal projects. But there has never been a way for me to Shocase what I know. Plus I think it may be high time I run through everything from top to bottom. I know much of this will be a review, but I’ve seen how learning, then sharing deepens knowledge. My first day has been a great review on some things I know well.</summary></entry><entry><title type="html">Bitbucket &amp;amp; Git</title><link href="/git/2017/09/07/Bitbucket.html" rel="alternate" type="text/html" title="Bitbucket &amp;amp; Git" /><published>2017-09-07T00:00:00+02:00</published><updated>2017-09-07T00:00:00+02:00</updated><id>/git/2017/09/07/Bitbucket</id><content type="html" xml:base="/git/2017/09/07/Bitbucket.html">&lt;p&gt;Been looking at version control for some time. I’ve been doing small code and CSS fixes to sites for a few months. Built out simple Wordpress plugins.
It has generally felt like learning to push such code to a Git repo would take more effort than reward. But after I’ve looked at other version control systems out there. I’ve decided that Git is a clear winner in terms of enabling team work. Team work was the bit that really got me interested in Git in the end.&lt;/p&gt;

&lt;p&gt;Recently had a Grad Student make contact for Internship. He’s a friend of a friend which made for a nice warm introduction.
He’s about to finish his degree but has gotten stuck in the Job readiness department. I’ve been looking at ways for us to colaborate remotely when we can’t work in person.&lt;/p&gt;

&lt;p&gt;I ended up going with Asana, Bitbucket and Slack as our remote work stack. And we’ve just heading into a new project together.&lt;/p&gt;

&lt;p&gt;I’ve recently enjoyed the Atomic design way of thinking. I’ve got a seperate post on this. It’s really broadened my thinking in terms of how I plan out design. Some of the smaller projects like themes for Wordpress sites of small Businesses don’t really have the budget to invest in design systems. I think as time goes on more businesses will start to think this way. But right now Small business is stuck in the design, neglect, abandon and redesign cycle. This really alienates end users who really resent having to re-learn how to use a site they love.&lt;/p&gt;

&lt;p&gt;We’ve taken quite some time going over Wordpress themes and setup for Webdesign. Also moved my Development environment over to Ubuntu from Windows7 after dabbling in Windows8 then 8.1 then 10.&lt;/p&gt;

&lt;p&gt;After careful consideration I actually enjoy using Bitbucket it’s got more functionality and is more intergrated with Atlassian’s Development toolset. It’s been fairly easy to onboard an Intern. All it took was writing some walkthroughs and links to relevant docs and we’re all set.&lt;/p&gt;

&lt;p&gt;Will be relooking Github again in the future.&lt;/p&gt;</content><author><name>Barco van Rhijn</name></author><category term="Git" /><summary type="html">Been looking at version control for some time. I’ve been doing small code and CSS fixes to sites for a few months. Built out simple Wordpress plugins. It has generally felt like learning to push such code to a Git repo would take more effort than reward. But after I’ve looked at other version control systems out there. I’ve decided that Git is a clear winner in terms of enabling team work. Team work was the bit that really got me interested in Git in the end.</summary></entry></feed>